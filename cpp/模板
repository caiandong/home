- <u>**parameter(形参)**和**argument(实参)**有时候可能都称作`参数`,可以根据上下文中进行判断出来</u>

#### 部分概念

```text
		泛左值          	右值
      /				\		/			\
左值         		 亡值      		 纯右值    

//泛左值是:左值和亡值
//右值是:亡值和纯右值

模板       &&     部分特化          	=>模板
                ||
                \/
  全特化(显式特化)             	=>普通定义
                ||
                \/
           实例化              	=>程序中的实体对象
```

### 引用坍塌(或引用折叠)

- T&& &&,坍塌成为T&&

- 其他都坍塌成为T&,例如:T&& &,T& &,T& &&.

#### std::remove_reference

```cpp
template< class T >
struct remove_reference;
//可能的实现
template< class T > struct remove_reference      {typedef T type;};
template< class T > struct remove_reference<T&>  {typedef T type;};
template< class T > struct remove_reference<T&&> {typedef T type;};
//c++14
template< class T >
using remove_reference_t = typename remove_reference<T>::type;
```

#### std::forward

```cpp
//c++14起
template< class T >
constexpr T&& forward( std::remove_reference_t<T>& t ) noexcept;
template< class T >
constexpr T&& forward( std::remove_reference_t<T>&& t ) noexcept;
```

一个可能的***完美转发***的用法是:

```cpp
template<class T>
void wrapper(T&& arg) 
{
    // arg 始终是左值
    foo(std::forward<T>(arg)); // 转发为左值或右值，依赖于 T
}
```

形参arg的声明形式表明它是一个***转发引用***.分为两种情况:

> 只有把函数模板的函数形参声明为指向模板形参的右值引用,例如,是上述情况,那才是转发引用,甚至不能有cv限定.
>
> 转发引用可以接受左值.如果传递一个int左值给上述函数,则T被推断为int &,函数参数就为int & &&,当然,这是模板推导出来的,我们无法手动声明这样的参数,于是应用以上引用折叠,arg的最终类型是int &.

- 例如传递参数5给arg.首先,`T&& arg`推导T为int,于是`std::forward<T>`中T为int,(之后会先选择上述第一个非特化版remove_reference)注意右值引用名arg是左值,此时arg是一个左值,从而选择第一个forward重载,返回int &&.转发成功,返回原来的右值参数.
- 例如传递有名字的int变量a给arg.首先,因为arg是转发引用且a为左值,模板会推导T为int &也就是,`std::forward<T>`中T为int &(之后选择上述第二个特化版remove_reference),虽然也选择第一个forward重载,但会和它的返回值:`T &&`产生引用折叠,即`int & &&`返回值变为int &.转发成功,返回原来的左值参数.

#### loki中的Typelist

```cpp
    template <class T, class U>
    struct Typelist
    {
       typedef T Head;
       typedef U Tail;
    };
```

### 根据编译时条件选择某个类型

```cpp
template <bool FK,typename T1,typename T2>
struct IfThenElse;

template <typename T1,typename T2>
struct IfThenElse<true,T1,T2>
{
    typedef T1 Result;
};
template <typename T1,typename T2>
struct IfThenElse<false,T1,T2>
{
    typedef T2 Result;
};
```

从`c++ templates`节选,对应`std::conditional`

### 部分特化

- 基准情形是第一个**模板非类型参数**(template non-type parameter)int为0.模板非类型参数部分特化.其中,每次模板非类型参数包增加前面一个非类型参数`N-1`,参数包中元素数量增加.

```cpp
template <int ...>
struct IndexSeq{};

//主模板(primary template)
//递归情形
template <int N,int ...Indexes>
struct MakeIndexes:MakeIndexes<N-1,N-1,Indexes...> //与下面不同
{
    
};

template <int ...Indexes>
struct MakeIndexes<0,Indexes...>        //部分特化.基准情形
{
    typedef  IndexSeq<Indexes...> type;
}; 
```

- 基准情形是形参包元素数量为0.与以上相似,但它是**解包**(unpack),每次使参数包元素数量减少1.

```cpp
//与上个不同,但在这里是主模板
//将是基准情形
template <class ...T>
class fuckyou		
{
public:
    fuckyou(){std::cout<<"本来模板\n";}
};

template<class T1,class ...T2>
class fuckyou<T1,T2...>:public fuckyou<T2...>	//递归情形,与上面不同
{
public:
    fuckyou(){std::cout<<"特化\n";}
};
```

- 基准情形也是形参包元素数量为0

```cpp
template <class... Ts> struct tuple {};		//主模板

template <class T, class... Ts>         //部分特化
struct tuple<T, Ts...> : tuple<Ts...> {
  tuple(T t, Ts... ts) : tuple<Ts...>(ts...), tail(t) {}

  T tail;
};

template<typename Head, typename... Tail>
class tuple<Head, Tail...>:private tuple<Tail...> {  // here is the recursion
}
```

> __PRETTY_FUNCTION__     
>     std::cout << __PRETTY_FUNCTION__ << "\n";	//打印类型
