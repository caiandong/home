
this关键字
    https://dmitripavlutin.com/gentle-explanation-of-this-in-javascript/

 
函数有两个内置对象，this和arguments
    this代表当前函数的执行环境，默认指向全局window。
    arguments是一个数组，表示传入此函数的参数。
    arguments.callee:指向拥有此参数的函数。
函数对象有prototype属性和length属性。
    通过函数构造对象，对象的一些方法实例和属性都放在这个原型中。
    length代表函数希望接受的参数个数。
apply()和 call()是函数的方法。
    这两个方法都接受第一个参数是执行环境对象，第二个是接受的参数。
    不同的是，前一个方法接受参数数组，后一个接受分开写的参数。
    
函数的prototype属性：它表示一个对象，这个对象是所有通过构造函数创造的对象的共享实例。它的方法与属性被这些对象实例共享。
    所有通过构造函数创建的对象实例内部都隐含指向构造函数的prototype属性指向的共享对象。这个对象不能直接访问，所以只能
    通过构造函数原型来访问，当把构造函数原型指向新的对象实例时，已经创建的对象仍然指向原来的原型对象。
    也就是说，构造函数原型会指向一个原型对象实例，通过这个构造函数创建的对象会隐含指向同一个原型实例，
    当修改构造函数原型指向其他实例时，已经创建的对象隐含指向的原型是没有改变的。
 Object.getPrototypeOf()可以返回对象内部的原型。

 
 父执行环境->变量对象
        -> 函数->执行环境 -> 变量对象(活动对象)
            ->其他对象
        ->其他对象

最新的 ECMAScript 标准定义了 7 种数据类型:

    6 种原始类型:
        Boolean
        Null
        Undefined
        Number
        String
        Symbol (ECMAScript 6 新定义)
    和 Object
当我们使用 var 声明一个变量，它只能获取这7种类型中的一个。


关于null的bug(http://2ality.com/2013/10/typeof-null.html)

undefined和null
    undefined是描述一个变量标识符的值没有声明,也就是说描述这个引用值本身。
    null用来描述
