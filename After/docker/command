$ docker search busybox
根据名字查找image

$ docker search --stars=3 --no-trunc busybox
查找大于3星，并且显示没有被截取的描述
--limit 限制查找结果，默认是25

$ docker search --filter stars=3 busybox
过滤规则是“k=v”形式。多个过滤要分别写，例如--filter "foo=bar" --filter "bif=baz"
目前支持三种：
stars 星的数量
is-automated 是否是自动的
is-official 是否是官方的


$ docker pull debian

Using default tag: latest
latest: Pulling from library/debian
fdd5d7827f33: Pull complete
a3ed95caeb02: Pull complete
Digest: sha256:e7d38b3517548a1c71e41bffe9c8ae6d6d29546ce46bf62159837aad072c90aa
Status: Downloaded newer image for debian:latest

拉取最新标签的image。
层可以在images之间复用，遇到相同的层下次就不用再下载了。
    分别有两层：fdd5d7827f33和a3ed95caeb02。

$ docker pull debian:jessie
拉取标签为jessie的image。

$ docker pull ubuntu:14.04

14.04: Pulling from library/ubuntu
5a132a7e7af1: Pull complete
fd2731e4c50c: Pull complete
28a2f68d1120: Pull complete
a3ed95caeb02: Pull complete
Digest: sha256:45b23dee08af5e43a7fea6c4cf9c25ccf269ee113168c19722f87876677c5cb2
Status: Downloaded newer image for ubuntu:14.04

Digest：不可变标识
如果不想使用更新的版本，可以用Digest替换标签。对于上面的例子，如下：
$ docker pull ubuntu@sha256:45b23dee08af5e43a7fea6c4cf9c25ccf269ee113168c19722f87876677c5cb2

sha256:45b23dee08af5e43a7fea6c4cf9c25ccf269ee113168c19722f87876677c5cb2: Pulling from library/ubuntu
5a132a7e7af1: Already exists
fd2731e4c50c: Already exists
28a2f68d1120: Already exists
a3ed95caeb02: Already exists
Digest: sha256:45b23dee08af5e43a7fea6c4cf9c25ccf269ee113168c19722f87876677c5cb2
Status: Downloaded newer image for ubuntu@sha256:45b23dee08af5e43a7fea6c4cf9c25ccf269ee113168c19722f87876677c5cb2

$ docker pull --all-tags fedora
拉取所有images

$ docker images fedora
REPOSITORY   TAG         IMAGE ID        CREATED      SIZE
fedora       rawhide     ad57ef8d78d7    5 days ago   359.3 MB
fedora       20          105182bb5e8b    5 days ago   372.7 MB
fedora       heisenbug   105182bb5e8b    5 days ago   372.7 MB
fedora       latest      105182bb5e8b    5 days ago   372.7 MB
刚刚拉取的所有image

kill docker pull进程来取消拉取。
技术上说，dokcer客户端和docker daemon服务断开连接,那么拉取就会被终止。

$ docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]
表示新建一个容器环境来运行IMAGE。运行已有的请用 docker start

$ docker run -d -p 80:80 my_image 
-d：在分离的进程中运行，类似于后台。不指定默认在前台运行
-p: 映射主机端口->容器端口

$ docker run --name test -it debian
--name：给新容器一个名字test
-it： 连接容器标准输入交互和分配一个tty

$ docker run --cidfile /tmp/docker_test.cid ubuntu echo "test"
捕获容器ID到一个文件，文件已存在则报错

$ docker run -t -i --rm ubuntu bash
--rm：自动移除容器，在它退出时

$ docker run -t -i --privileged ubuntu bash
获取几乎主机内所有权限，应该只用于在docker中运行docker

$ docker  run -w /path/to/dir/ -i -t  ubuntu pwd
设置pwd命令工作路径

$ docker run -d --tmpfs /run:rw,noexec,nosuid,size=65536k my_image
挂载tmpfs。

$ docker  run  -v `pwd`:`pwd` -w `pwd` -i -t  ubuntu pwd
挂载卷，默认只读方式挂载。
将当前工作目录挂载到容器工作目录，并让pwd在当前目录执行

重启策略
$ docker run --restart=always redis
--restart：no默认，on-failure[:max-retries]，always，unless-stopped

$ docker rm -v redis
redis
移除一个redis容器和它的卷，卷有名子的不会移除

$ docker create -v awesome:/foo -v /bar --name hello redis
hello
$ docker rm -v hello
移除/bar /foo不会移除

docker ps -a
查看所有容器列表
