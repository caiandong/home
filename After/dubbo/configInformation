配置 API
org.apache.dubbo.config.ServiceConfig

<dubbo:service interface="org.apache.dubbo.demo.DemoService" ref="demoService" />
    暴露服务接口，引用实际的demoService服务
org.apache.dubbo.config.ReferenceConfig

<dubbo:reference id="demoService" interface="org.apache.dubbo.demo.DemoService" />

org.apache.dubbo.config.ProtocolConfig

 <dubbo:protocol name="dubbo" port="20880" />

org.apache.dubbo.config.RegistryConfig

 <dubbo:registry address="multicast://224.5.6.7:1234" />

org.apache.dubbo.config.MonitorConfig
org.apache.dubbo.config.ApplicationConfig

<dubbo:application name="hello-world-app"  />

org.apache.dubbo.config.ModuleConfig
org.apache.dubbo.config.ProviderConfig
org.apache.dubbo.config.ConsumerConfig
org.apache.dubbo.config.MethodConfig
org.apache.dubbo.config.ArgumentConfig

注解 API
org.apache.dubbo.config.annotation.Service
org.apache.dubbo.config.annotation.Reference

服务API
org.apache.dubbo.rpc.service.GenericService
org.apache.dubbo.rpc.service.GenericException


<dubbo:service/>	服务配置	用于暴露一个服务，定义服务的元信息，一个服务可以用多个协议暴露，一个服务也可以注册到多个注册中心
<dubbo:reference/> [2]	引用配置	用于创建一个远程服务代理，一个引用可以指向多个注册中心
<dubbo:protocol/>	协议配置	用于配置提供服务的协议信息，协议由提供方指定，消费方被动接受
<dubbo:application/>	应用配置	用于配置当前应用信息，不管该应用是提供者还是消费者
<dubbo:module/>	模块配置	用于配置当前模块信息，可选
<dubbo:registry/>	注册中心配置	用于配置连接注册中心相关信息
<dubbo:monitor/>	监控中心配置	用于配置连接监控中心相关信息，可选
<dubbo:provider/>	提供方配置	当 ProtocolConfig 和 ServiceConfig 某属性没有配置时，采用此缺省值，可选
<dubbo:consumer/>	消费方配置	当 ReferenceConfig 某属性没有配置时，采用此缺省值，可选
<dubbo:method/>	方法配置	用于 ServiceConfig 和 ReferenceConfig 指定方法级的配置信息
<dubbo:argument/>	参数配置	用于指定方法参数配置

不同粒度配置的覆盖关系
以 timeout 为例，下图显示了配置的查找顺序，其它 retries, loadbalance, actives 等类似：

方法级优先，接口级次之，全局配置再次之。
如果级别一样，则消费方优先，提供方次之。
其中，服务提供方配置，通过 URL 经由注册中心传递给消费方。

动态配置中心
配置中心（v2.7.0）在Dubbo中承担两个职责：

1.外部化配置。启动配置的集中式存储 （简单理解为dubbo.properties的外部化存储）。
2.服务治理。服务治理规则的存储与通知。

启用动态配置（以Zookeeper为例，可查看动态配置配置项详解）：

<dubbo:config-center address="zookeeper://127.0.0.1:2181"/>
或者

dubbo.config-center.address=zookeeper://127.0.0.1:2181
或者

ConfigCenterConfig configCenter = new ConfigCenterConfig();
configCenter.setAddress("zookeeper://127.0.0.1:2181");

为了兼容2.6.x版本配置，在使用Zookeeper作为注册中心，且没有显示配置配置中心的情况下，Dubbo框架会默认将此Zookeeper用作配置中心，但将只作服务治理用途。

优先级

外部化配置默认较本地配置有更高的优先级，因此这里配置的内容会覆盖本地配置值，关于各配置形式间的覆盖关系有单独一章说明，你也可通过以下选项调整配置中心的优先级：

-Ddubbo.configCenter.highestPriority=false

也就是说，privider和consumer在读取本地配置后，通过配置的config-center-address再去加载配置中心的配置
随后覆盖已经加载的配置。

作用域
外部化配置有全局和应用两个级别，全局配置是所有应用共享的，应用级配置是由每个应用自己维护且只对自身可见的。

当前已支持的扩展实现有Zookeeper、Apollo。
Zookeeper
<dubbo:config-center address="zookeeper://127.0.0.1:2181"/>
默认所有的配置都存储在/dubbo/config节点，具体节点结构图如下：@zk-configcenter

namespace，用于不同配置的环境隔离。
config，Dubbo约定的固定节点，不可更改，所有配置和服务治理规则都存储在此节点下。
dubbo/application，分别用来隔离全局配置、应用级别配置：dubbo是默认group值，application对应应用名
dubbo.properties，此节点的node value存储具体配置内容

Apollo
<dubbo:config-center protocol="apollo" address="127.0.0.1:2181"/>
Apollo中的一个核心概念是命名空间 - namespace（和上面zookeeper的namespace概念不同），在这里全局和应用级别配置就是通过命名空间来区分的。

默认情况下，Dubbo会从名叫dubbo的命名空间中读取全局配置（<dubbo:config-center namespace="your namespace">）
而应用自有的配置，会从application命名空间读取：
<dubbo:config-center namespace="dubbo">             //默认这样的？
<dubbo:config-center namespace="application">       //默认这样的？

自己加载外部化配置

所谓Dubbo对配置中心的支持，本质上就是把.properties从远程拉取到本地，然后和本地的配置做一次融合。
理论上只要Dubbo框架能拿到需要的配置就可以正常的启动，它并不关心这些配置是自己加载到的还是应用直接塞给它的，
所以Dubbo还提供了以下API，让用户将自己组织好的配置塞给Dubbo框架（配置加载的过程是用户要完成的），
这样Dubbo框架就不再直接和Apollo或Zookeeper做读取配置交互。

// 应用自行加载配置
Map<String, String> dubboConfigurations = new HashMap<>();
dubboConfigurations.put("dubbo.registry.address", "zookeeper://127.0.0.1:2181");
dubboConfigurations.put("dubbo.registry.simplified", "true");

//将组织好的配置塞给Dubbo框架
ConfigCenterConfig configCenter = new ConfigCenterConfig();
configCenter.setExternalConfig(dubboConfigurations);

配置加载流程

此篇文档主要讲在应用启动阶段，Dubbo框架如何将所需要的配置采集起来（包括应用配置、注册中心配置、服务配置等），以完成服务的暴露和引用流程。

根据驱动方式的不同（比如Spring或裸API编程）配置形式上肯定会有所差异，具体请参考XML配置、Annotation配置、API配置三篇文档。除了外围驱动方式上的差异，Dubbo的配置读取总体上遵循了以下几个原则：

Dubbo支持了多层级的配置，并按预定优先级自动实现配置间的覆盖，最终所有配置汇总到数据总线URL后驱动后续的服务暴露、引用等流程。
ApplicationConfig、ServiceConfig、ReferenceConfig可以被理解成配置来源的一种，是直接面向用户编程的配置采集方式。
配置格式以Properties为主，在配置内容上遵循约定的path-based的命名规范

配置来源

首先，从Dubbo支持的配置来源说起，默认有四种配置来源：

JVM System Properties，-D参数
Externalized Configuration，外部化配置
ServiceConfig、ReferenceConfig等编程接口采集的配置
本地配置文件dubbo.properties

覆盖关系
下图展示了配置覆盖关系的优先级，从上到下优先级依次降低：
@configuration.jpg
(SystemProperties ExternalizedConfiguration  Spring/Api  LocalFile)

配置格式

目前Dubbo支持的所有配置都是.properties格式的，包括-D、Externalized Configuration等，.properties中的所有配置项遵循一种path-based的配置格式：

# 应用级别
dubbo.{config-type}[.{config-id}].{config-item}={config-item-value}
# 服务级别
dubbo.service.{interface-name}[.{method-name}].{config-item}={config-item-value}
dubbo.reference.{interface-name}[.{method-name}].{config-item}={config-item-value}
# 多配置项
dubbo.{config-type}s.{config-id}.{config-item}={config-item-value}
应用级别
dubbo.application.name=demo-provider
dubbo.registry.address=zookeeper://127.0.0.1:2181
dubbo.protocol.port=-1
服务级别
dubbo.service.org.apache.dubbo.samples.api.DemoService.timeout=5000
dubbo.reference.org.apache.dubbo.samples.api.DemoService.tineout=6000
dubbo.reference.org.apache.dubbo.samples.api.DemoService.sayHello.timeout=7000
多配置项
dubbo.registries.unit1.address=zookeeper://127.0.0.1:2181
dubbo.registries.unit2.address=zookeeper://127.0.0.1:2182

dubbo.protocols.dubbo.name=dubbo
dubbo.protocols.dubbo.port=20880
dubbo.protocols.hessian.name=hessian
dubbo.protocols.hessian.port=8089
扩展配置
dubbo.application.parameters.item1=value1
dubbo.application.parameters.item2=value2
dubbo.registry.parameters.item3=value3
dubbo.reference.org.apache.dubbo.samples.api.DemoService.parameters.item4=value4
