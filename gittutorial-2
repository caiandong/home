
在读这个教程前你应该已经研究过gittutorial(https://git-scm.com/docs/gittutorial)

这个教程的目标是介绍Git架构的两个基本部分--对象数据库(object database)和索引文件(index file),从而提供读者必要的内容来理解git文档的剩余部分.
git对象数据库
    让我们以一个新工程开始然后创建一个少量的历史:
        $ mkdir test-project
        $ cd test-project
        $ git init
        Initialized empty Git repository in .git/
        $ echo 'hello world' > file.txt
        $ git add .
        $ git commit -a -m "initial commit"
        [master (root-commit) 54196cc] initial commit
        1 file changed, 1 insertion(+)
        create mode 100644 file.txt
        $ echo 'hello world!' >file.txt
        $ git commit -a -m "add emphasis"
        [master c4d59f3] add emphasis
        1 file changed, 1 insertion(+), 1 deletion(-)
    git回应commit的7个十六进制数字是什么?
    
    我们在教程的第一部分看到提交会有像这样的名字.实际结果是,每个git历史中的对象都被存在40位十六进制数的名称下.名字本身是对象内容的SHA-1的散列;除了其他事情外,这将确保git绝不会存储相同的数据两次(因为唯一的数据对应唯一的SHA-1名),而且git对象的内容也绝不产生变化(这将又对对象名产生变化).7个字符十六进制字符串是40个长字符串的缩写(取前七个字符).缩写可以用在对应原始名合法的任何地方,只要他们没有歧义.
    
    当跟随以上的例子时,我们可以料到你创建的提交对象的内容会生成不同的SHA-1散列而不是上面显示的那个,因为提交对象会记录它被生成时的时间和执行提交的人的名字.
    
    我们使用cat-file命令可以询问git关于这个特别的对象.复制你自己的版本的40位的十六进制提交名而非上面显示的.你也可以缩减到只有几个字母,减少输入整个40位长度.
        $ git cat-file -t 54196cc2
        commit
        $ git cat-file commit 54196cc2
        tree 92b8b694ffb1675e5975148e1121810081dbdffe
        author J. Bruce Fields <bfields@puzzle.fieldses.org> 1143414668 -0500
        committer J. Bruce Fields <bfields@puzzle.fieldses.org> 1143414668 -0500

        initial commit
    一个树(tree)可以指向一个或更多"blob"对象,每个都对应一个文件.除此之外,树也可以指向其他树对象,从而会创建一个目录层次.你可以使用ls-tree命令检查任何树的内容(记住,足够长的开始的SHA-1名就够了):
        $ git ls-tree 92b8b694
        100644 blob 3b18e512dba79e4c8300dd08aeb37f8e728b8dad    file.txt
    因此我们看到这棵树中有一个文件.SHA-1散列是到文件的数据的引用:
        $ git cat-file -t 3b18e512
        blob
    "blob"只是一个文件数据,我们也可以使用cat-file命令检查它:
        $ git cat-file blob 3b18e512
        hello world
    注意到这是老的文件数据;所以git对初始树的响应所命名的对象是目录状态的快照,其由第一次提交所记录.
    
    所有这些对象(即其中包括blob tree commit tag对象)都被存储在他们的SHA-1名之下,位于git目录内:
        $ find .git/objects/
        .git/objects/
        .git/objects/pack
        .git/objects/info
        .git/objects/3b
        .git/objects/3b/18e512dba79e4c8300dd08aeb37f8e728b8dad
        .git/objects/92
        .git/objects/92/b8b694ffb1675e5975148e1121810081dbdffe
        .git/objects/54
        .git/objects/54/196cc2703dc165cbd373a65a4dcf22d50ae7f7
        .git/objects/a0
        .git/objects/a0/423896973644771497bdc03eb99d5281615b51
        .git/objects/d0
        .git/objects/d0/492b368b66bdabf2ac1fd8c92b39d3db916e59
        .git/objects/c4
        .git/objects/c4/d59f390b9cfd4318117afde11d601c1085f241
    而且这些文件的内容只是压缩数据加上标识它们长度和类型的头.类型是blob,树(tree),提交(commit),或者标签(tag)之一.
    
    能发现的最简单的提交就是HEAD提交,我们可以从.git/HEAD文件中找到:
        $ cat .git/HEAD
        ref: refs/heads/master
    正如你所见,这告诉我们当前我们正在哪个分支上,它也告诉我们这个,通过在.git目录命名一个文件,文件包含一个SHA-1名指向一个提交对象,我们可以使用cat-file检查这个对象:
        $ cat .git/refs/heads/master
        c4d59f390b9cfd4318117afde11d601c1085f241
        $ git cat-file -t c4d59f39
        commit
        $ git cat-file commit c4d59f39
        tree d0492b368b66bdabf2ac1fd8c92b39d3db916e59
        parent 54196cc2703dc165cbd373a65a4dcf22d50ae7f7
        author J. Bruce Fields <bfields@puzzle.fieldses.org> 1143418702 -0500
        committer J. Bruce Fields <bfields@puzzle.fieldses.org> 1143418702 -0500

        add emphasis
    这里的tree(上述输出的tree后面的树对象)对象指向树的最新状态:
        $ git ls-tree d0492b36
        100644 blob a0423896973644771497bdc03eb99d5281615b51    file.txt
        $ git cat-file blob a0423896
        hello world!
    而parent对象(同上,所以此时是一个commit类型对象)指向前一个提交:
        $ git cat-file commit 54196cc2
        tree 92b8b694ffb1675e5975148e1121810081dbdffe
        author J. Bruce Fields <bfields@puzzle.fieldses.org> 1143414668 -0500
        committer J. Bruce Fields <bfields@puzzle.fieldses.org> 1143414668 -0500

        initial commit
    此树对象是我们第一次检查的树,而且这个提交是不寻常的,它缺少任意父(parent).
    
    大多数提交只有唯一一个parent,但通常来说一个提交也可以有多个parent.在那种情况下,提交表示一个合并(merge),parent指向被合并的分支的头提交.
    
    除了blob,tree,和commit,剩下一个对象类型是tag,这里不讨论(https://git-scm.com/docs/git-tag)
    
    所以现在我们知道了git如何使用对象数据库表示一个工程的历史:
        - "commit"对象指向tree对象,tree对象表示在历史中的特定点的目录树的快照;还指向parent提交,这显示它们如何被连接在工程历史中.
        - "tree"对象表示单个目录的状态,它关联目录名到包含文件数据的blob对象和包含子目录信息的tree对象
        - "blob"对象包含文件数据而没有任何其他结构.
        - 到每一个分支的开头的提交对象的引用被存储在.git/refs/heads/之下的文件中.
        - 当前分支名被存储在.git/HEAD文件内.
    顺便注意,许多命令使用一个tree作为参数.但正如我们以上看到的,也可以有许多不同的方式--通过树的SHA-1名,通过指向树的提交的名子,通过指向那个树的头的分支名,等等.大对数这样的命令可以接受这些名字.
    
索引(index)文件 
    我们已经使用过git commit -a创建了提交,这个主要的工具会创建一个提交,其包含你在你的工作树中的每一个改变.但如果你只想提交某些文件的改变呢?或者只是某些文件的某些改变?
    如果我们看看底层中创建提交的方式,我们将看到有更加灵活的方式创建提交.
    继续我们的test-project例子,让我们再次修改file.txt:
        $ echo "hello world, again" >>file.txt
    但这次不立即做一个提交,相反,让我们采取一个中间步骤,即在整个过程中寻求diff命令跟踪发生什么事了:
        $ git diff
        --- a/file.txt
        +++ b/file.txt
        @@ -1 +1,2 @@
        hello world!
        +hello world, again
        $ git add file.txt
        $ git diff
最后的diff没有输出,但没有新提交产生,head仍然没包含新行:
    $ git diff HEAD
    diff --git a/file.txt b/file.txt
    index a042389..513feba 100644
    --- a/file.txt
    +++ b/file.txt
    @@ -1 +1,2 @@
    hello world!
    +hello world, again
所以git diff 是和某种东西比较,但不是head.它比较的对象实际上是索引(index)文件,其被用二进制格式存储在.git/index文件中,然而我们可以使用ls-files命令检查他的内容:
    $ git ls-files --stage
    100644 513feba2e53ebbd2532419ded848ba19de88ba00 0       file.txt
    $ git cat-file -t 513feba2
    blob
    $ git cat-file blob 513feba2
    hello world!
    hello world, again
所以我们的git add所做的是存储新的blob然后在索引文件中放一个引用指向它.如果我们再次修改文件,我们可以看到新的改变被反映到git diff的输出中:
    $ echo 'again?' >>file.txt
    $ git diff
    index 513feba..ba3da7b 100644
    --- a/file.txt
    +++ b/file.txt
    @@ -1,2 +1,3 @@
    hello world!
    hello world, again
    +again?
使用正确的参数,git diff也可以向我们展示工作目录和最后一次提交的不同,或者索引与最后一次提交的不同:
    $ git diff HEAD             //工作目录和最后一次提交
    diff --git a/file.txt b/file.txt
    index a042389..ba3da7b 100644
    --- a/file.txt
    +++ b/file.txt
    @@ -1 +1,3 @@
    hello world!
    +hello world, again
    +again?
    $ git diff --cached         //索引与最后一次提交
    diff --git a/file.txt b/file.txt
    index a042389..513feba 100644
    --- a/file.txt
    +++ b/file.txt
    @@ -1 +1,2 @@
    hello world!
    +hello world, again
任何时候,我们都可以使用git commit(没有-a选项)创建新提交,并且检查只包含存储在索引文件的改变的提交状态,而不是另外的仍在我们工作树上的改变:
    $ git commit -m "repeat"
    $ git diff HEAD
    diff --git a/file.txt b/file.txt
    index 513feba..ba3da7b 100644
    --- a/file.txt
    +++ b/file.txt
    @@ -1,2 +1,3 @@
    hello world!
    hello world, again
    +again?
所以,默认的git commit使用索引创建提交,而非工作树;-a选项的提交可以告诉git首先使用工作树中的所有改变来更新索引.
最后,值得看看git add在索引文件上的效果:
    $ echo "goodbye, world" >closing.txt
    $ git add closing.txt
git add 的影响是添加一个条目到索引文件中:
    $ git ls-files --stage
    100644 8b9743b20d4b15be3955fc8d5cd2b09cd2336138 0       closing.txt
    100644 513feba2e53ebbd2532419ded848ba19de88ba00 0       file.txt
并且,你可以使用cat-file命令看看此条目,它指向文件的当前内容:
    $ git cat-file blob 8b9743b2
    goodbye, world
也要注意,一个裸git diff命令会显示file.txt的改变,但没有新增的closing.txt的改变,因为索引文件中closing.txt的版本和工作目录中的那个是完全一样的.
除了成为新提交的暂存区域,当检出一个分支时,索引文件也会从对象数据库中进行填充,也会被用来持有关联一个提交操作的树.
