 $[number]
    $0      $1          $2...分别表示
    第0个，第一个，第二个。。。命令行变量。
    $0表示输入的整个程序名，可以用basename命令得到不包含路径的程序名
    $1 $2 ..表示随后的每一个参数，最多可以写到$9,要想表示大于10个参数，使用大括号,${10}。 
 $#     
    返回命令行参数个数，不包括脚本名
${!#}
    实际上应该是${$#},但只能用!替换得到，即返回最后一个参数
$*和$@
   $* 变量会将命令行上提供的所有参数当作一个单词保存
   $*变量会将这些参数视为一个整体,而不是多个个体。
    $@变量会将命令行上提供的所有参数当作同一字符串中的多个独立的单词。


test(也即方括号测试表达式 [ a > b ] 语法)命令常用比较名称含义
    ：注意须知
        test命令和测试表达式使用标准的数学比较符号来表示字符串比较,而用文本代码来表
        示数值比较。这个细微的特性被很多程序员理解反了。如果你对数值使用了数学运算符
        号,shell会将它们当成字符串值,可能无法得到正确的结果。

    1.对于数值比较
        n1 -eq n2
            ：-eq是equal
        n1 -ge n2
            : -ge 是Greater than equal 大于等于
        n1 -gt n2
            : -gt 是Greater than 大于
        n1 -le n2
            : -le 是less then equal 小于等于
        n1 -lt n2
            : -lt 是less then 小于
        n1 -ne n2
            : -ne 是not equal 不等于
    2.字符串比较
        str1 = str2     检查str1 是否和str2 相同
        str1 != str2    检查str1 是否和str2 不同
        str1 < str2     检查str1 是否比str2 小
        str1 > str2     检查str1 是否比str2 大
        -n str1         检查str1 的长度是否非0
        -z str1         检查str1 的长度是否为0
        ：注意由于> < 与重定向符号一样，所以需要转义，例如 str1 \< str2
            并且sort的排序和此处的比较相反，此处按照ascii表，A(65)<a(97)
            sort A>a
    3.文件比较
        ：注意，file不存在都返回1。
        -d file     检查file是否存在并是一个目录
            :不存在或者不是目录都返回1，是一个目录才返回0
        -e file     检查file是否存在
            ：是文件或者是目录，都返回0
        -f file     检查file是否存在并是一个文件
            ：和-d相反，是一个文件而不是目录，才返回0
        -r file     检查file是否存在并可读
        -s file     检查file是否存在并非空
            ：文件非空时返回0，空目录也返回0，touch创建的文件返回1。
             也就是说，ls命令第三列返回0大小都返回1
        -w file     检查file是否存在并可写
        -x file     检查file是否存在并可执行
        -O file     检查file是否存在并属当前用户所有
            ：当前的owner
        -G file     检查file是否存在并且默认组与当前用户相同
        file1 -nt file2     检查file1是否比file2新
            ：new then 和下面一样，比较的是文件的日期
        file1 -ot file2     检查file1是否比file2旧
            ：old then
复合测试
    [ condition1 ] && [ condition2 ]
    [ condition1 ] || [ condition2 ]

双括号和双方括号
    (( expression )) 
        1.注意，两边有空格 双括号允许使用高级数学表达式语法比较数值
        2.可以使用于常规变量赋值，(( val2 = $val1 ** 2 ))，括号内不需要转义任何字符
    [[ expression ]]
        ：注意， 双方括号在bash shell中工作良好。不过要小心,不是所有的shell都支持双方括号。
        增加了模式匹配，[[ $USER == r* ]]，支持正则表达式
