sudo zypper ar -fcg https://mirrors.ustc.edu.cn/opensuse/distribution/leap/42.3/repo/oss USTC:42.3:OSS
sudo zypper ar -fcg https://mirrors.ustc.edu.cn/opensuse/distribution/leap/42.3/repo/non-oss USTC:42.3:NON-OSS
sudo zypper ar -fcg https://mirrors.ustc.edu.cn/opensuse/update/leap/42.3/oss USTC:42.3:UPDATE-OSS
sudo zypper ar -fcg https://mirrors.ustc.edu.cn/opensuse/update/leap/42.3/non-oss USTC:42.3:UPDATE-NON-OSS
-c, --check     Probe given URI.
-f, --refresh
-g, --gpgcheck
查看网络与设置ip
 nmcli connection show eth0
 设置ip
 nmcli connection modify eth0 \
 > connection.autoconnect yes \
 > ipv4.method manual \
 > ipv4.addresses 172.16.1.1/16 \
 > ipv4.gateway 172.16.200.254 \
 > ipv4.dns 172.16.200.254
使设置生效
 nmcli connection up eth0
 存在dhcp自动获取ip
 nmcli connection modify eth0 \
 > connection.autoconnect yes \
 > ipv4.method auto



 java-1_8_0-openjdk-devel           (OpenJDK 8 Development Environment )
 java-1_8_0-openjdk-src              ( OpenJDK 8 Source Bundle  )
 libqt5-creator                      (Integrated Development Environment targeting Qt apps    )
 stardict         跨平台翻译单词软件
 chromium 谷歌浏览器
 uget       下载
 netease        网易云音乐
###################shell脚本#############
命令替换
`command`或$(command)
表示先执行命令，并且随后可提取命令输出赋值给变量
（命令会在子shell中执行，以./×××的脚本也是在子shell中执行）
重定向输入输出
一般程序内部存在 标准输入，标准输出，标准错误输出。
并且默认情况下，这些都是从控制台接受输入或者产生输出到控制台。
我们可以把标准输入输出重定向到文件。
管道
有些命令从标准输入读取，有些命令输出到标准输出。
所以,命令间可以用管道连接 command | command
执行整数间数学运算表达式
expr 5 + 6;
计算表达式，中间要有空格
expr 5 * 6;
执行报错，*是bash中特殊字符(通配符)，需要转译 \*
bash提供方括号替代原本expr命令,并且不用关心转译问题
即 $[5*6] 
echo $? 可以查看上次命令退出状态码
exit 5 表示以5为状态码退出，状态码最大255
exit $var 也可以使用变量，输出为与256的模运算结果

if-then

if command
then
    commands
fi
if后命令以0返回，则执行then后到fi结尾内所有命令
变体
if command; then
    commands
fi

if-then-else
类似if-then
if command
then
    commands
else
    commands
fi
状态码为0执行第一commands，否则执行第二个commands

if-then 分支选择
if command1
then
    commands
elif command2
then
    more commands
fi
if后只能接命令
test命令提供if后测试除状态码为0的其他条件
if test condition
condition可以有三类条件 数值比较，字符串比较，文件比较
bash提供test命令简单方式 方括号
[ condition ] 
condition与方括号前后分别有空格

复合条件测试
[ condition1 ] && [ condition2 ] 第一个成功执行第二个
[ condition1 ] || [ condition2 ] 第一个失败执行第二个
[ condition1 ] && [ condition2 ] || [ condition3 ]
与
 A ? B:C 一样
 
 bash提供双括号表达式(可用在test后测试)
 ((表达式))
 用在测试语句中，表达式结果为0,测试失败，否则为成功
 括号内支持高级运算 ++ -- ，并且无视转义字符
 双方括号[[]] 
 提供字符串比较高级特性，比如模式匹配，即正则表达式
 有些bash不支持双方括号
 
 case var in 
 pattern | pattern2)
    commands1 ;;
 pattern3)
    commands2 ;;
 *)
    commands3 ;;
 esac
