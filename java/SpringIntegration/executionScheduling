
TaskScheduler
    ConcurrentTaskScheduler(只配置@EnableScheduling，默认是用它)
        DefaultManagedTaskScheduler
    ThreadPoolTaskScheduler

ScheduledExecutorService(jdk接口)    

TaskScheduler 默认流程
注解情况下：
    1.@EnableScheduling利用ScheduledAnnotationBeanPostProcessor默认构造器导入bean后置处理器。
    2.构造器内部利用ScheduledTaskRegistrar默认构造器初始化registrar。
        默认构造器不会初始化其taskScheduler属性，而这个属性是真正用来调用@Scheduled方法的类。
    3.执行bean后置处理器postProcessAfterInitialization方法，处理带有@Scheduled注解的方法bean。
    4.调用processScheduled方法分别处理@Scheduled属性中的：（initia ldelay，）cron，fixed delay，fixed rate。
        这些@Scheduled注解的属性对应不同的Task：FixedDelayTask，FixedRateTask，CronTask。
        主要调用registrar的各种schedulexxx方法，由于第2步中默认构造器并未初始化TaskScheduler，
        所以在这些方法中对taskScheduler的判断都是空，所有@Scheduled方法无法执行。
    5.最终在容器发布ContextRefreshedEvent时，ScheduledAnnotationBeanPostProcessor的onApplicationEvent方法
        被调用，通过finishRegistration方法从容器中查找taskScheduler。配置的SchedulingConfigurer
        在这个方法中调用;如果不能初始化成功，再初查找ScheduledExecutorService(jdk)。
        都是调用registrar的setScheduler方法 最终如果都没找到，
        通过调用fterPropertiesSet->scheduleTasks，采用默认实现，完成初始化并且调用最终所有方法。
            默认实现：ConcurrentTaskScheduler(Executors.newSingleThreadScheduledExecutor())
        

Spreing提供了内建实现TaskExecutor,与JDK的java.util.concurrent.Executor是一样的：
    SyncTaskExecutor:同步执行调用，执行发生于调用线程中。用于测试情况。
    SimpleAsyncTaskExecutor：不复用线程，启动时为每个调用创建新线程。有并发限制，
    达到并发限制后阻塞这些新调用。
    ConcurrentTaskExecutor：很少使用，如果ThreadPoolTaskExecutor使用不灵活，可以用它替换。
    ThreadPoolTaskExecutor：被用最常见。它提供一个bean属性来配置java.util.concurrent.ThreadPoolExecutor，然后包装成TaskExecutor
    
Spring3.0引进了TaskScheduler来在一些未来的时间点运行:
public interface TaskScheduler {

    ScheduledFuture schedule(Runnable task, Trigger trigger);

    ScheduledFuture schedule(Runnable task, Instant startTime);

    ScheduledFuture schedule(Runnable task, Date startTime);

    ScheduledFuture scheduleAtFixedRate(Runnable task, Instant startTime, Duration period);

    ScheduledFuture scheduleAtFixedRate(Runnable task, Date startTime, long period);

    ScheduledFuture scheduleAtFixedRate(Runnable task, Duration period);

    ScheduledFuture scheduleAtFixedRate(Runnable task, long period);

    ScheduledFuture scheduleWithFixedDelay(Runnable task, Instant startTime, Duration delay);

    ScheduledFuture scheduleWithFixedDelay(Runnable task, Date startTime, long delay);

    ScheduledFuture scheduleWithFixedDelay(Runnable task, Duration delay);

    ScheduledFuture scheduleWithFixedDelay(Runnable task, long delay);
}

    
Trigger：
public interface Trigger {

    Date nextExecutionTime(TriggerContext triggerContext);
}

Trigger实现：
    CronTrigger：它可以让任务调度执行cron表达式，例如：
        scheduler.schedule(task, new CronTrigger("0 15 9-17 * * MON-FRI"));
        他表示，除了周末外十二小时制的9点到5点，每个小时的15分钟执行。
    PeriodicTrigger：和TaskScheduler有重复
TriggerContext：
public interface TriggerContext {

    Date lastScheduledExecutionTime();

    Date lastActualExecutionTime();

    Date lastCompletionTime();
}

启用Scheduling注解
@Configuration
@EnableAsync
@EnableScheduling
public class AppConfig {
}
@EnableAsync和@EnableScheduling两者可根据情况使用，不必一起出现。如果要细粒度配置
分别实现SchedulingConfigurer和AsyncConfigurer 

xml情况下使用<task:annotation-driven>元素：

@Scheduled(cron="*/5 * * * * MON-FRI")
public void doSomething() {
    // something that should execute on weekdays only
}
这样的方法不能有参数不能有返回值，要与容器内bean交互，使用依赖注入。

@Async
void doSomething() {
    // this will be executed asynchronously
}
可以有参数和返回值，返回值要是Future-typed 类型的。与@Scheduled方法不同，这些方法是正常被调用的，
而@Scheduled任务是被容器管理的scheduled任务。
@Async
Future<String> returnSomething(int i) {
    // this will be executed asynchronously
}

指定需要在哪个执行器内执行
@Async("otherExecutor")
void doSomething(String s) {
    // this will be executed asynchronously by "otherExecutor"
}

对于异常管理：
带有Future-typed返回值类型的@Async方法，可以在调用Future的get方法执行时被获取。

没有返回值不能捕获异常，但你可以提供AsyncUncaughtExceptionHandler处理异常，例如
public class MyAsyncUncaughtExceptionHandler implements AsyncUncaughtExceptionHandler {

    @Override
    public void handleUncaughtException(Throwable ex, Method method, Object... params) {
        // handle exception
    }
默认情况下异常被志记，你可以提供自定义实现通过AsyncConfigurer或者the <task:annotation-driven/> XML元素。     

}

<task:annotation-driven executor="myExecutor" scheduler="myScheduler"/>

<task:scheduler id="myScheduler" pool-size="10"/>           //处理@Scheduled注解

以上标签创建了一个ThreadPoolTaskScheduler实例，id属性代表线程池中线程的前缀，pool大小是10，默认是1

<task:executor id="myExecutor" pool-size="5"/>          //处理方法上的@Async注解

属性分别是:id，pool-size，queue-capacity,rejection-policy, keep-alive

1.和scheduler类似，但可配制更多。 poo-size配置单个值时，如上表示固定5个线程。还可以用一种min-max形式配置，
    5-10表示主要(core)5,最大10个线程。
2.默认情况下queue是无界的，queue-capacity="100"与min-max结合配置，与固定线程数配置不起效果。
3.rejection-policy默认是AbortPolicy，直接抛出异常。DiscardPolicy or DiscardOldestPolicy和CallerRunsPolicy
    最后一个是在提交线程请求的调用者线程内执行，有助于executor赶上任务的处理。
4.keep-alives表示在一个线程执行任务空闲后到最后回收终止时的生存时间，单位是秒。

<task:scheduled-tasks scheduler="myScheduler">
    <task:scheduled ref="beanA" method="methodA" fixed-delay="5000" initial-delay="1000"/>
    <task:scheduled ref="beanB" method="methodB" fixed-rate="5000"/>
    <task:scheduled ref="beanC" method="methodC" cron="*/5 * * * * MON-FRI"/>
</task:scheduled-tasks>
