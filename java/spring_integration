spring aop
java编程配置

@Configuration
@EnableAspectJAutoProxy
@Aspect
public class AppConfig {
    @Pointcut("execution(* transfer(..))")// the pointcut expression
    private void anyOldTransfer() {}// the pointcut signature
    @Before("execution(* com.xyz.myapp.dao.*.*(..))")
    public void doAccessCheck() {
        // ...
    }
}
@Aspect要添加在容器中
五大通知执行流程
不抛异常情况下

        环绕通知开始
            before通知执行
        环绕通知结束
    after(finally)通知执行
afterreturning通知执行

抛异常情况下

        环绕通知开始
            before通知执行
        \环绕通知结束无法得到执行
    after(finally)通知执行
    \afterreturning通知未执行
异常通知执行

首先，异常通知和返回值通知不能共存。每次最多4个可以同时执行。
抛异常执行奇怪点在于;
after通知是放在finally块中被捕获的，所以after会一直得到执行。
由于抛出异常，方法在异常之后的代码片段得不到执行，所以环绕通知结束不能执行。
方法由于没有返回(异常抛出后会栈解退，层层直接跳过正常方法执行。)，所以获取返回值的方法不能得到执行，最终只执行异常通知。
===================
spring缓存抽象

@Cacheable: Triggers cache population.

@Cacheable("books")
public Book findBook(ISBN isbn) {...}
在方法执行前检查缓存，有的话不会重复执行，直接从缓存返回。
注解可以声明多个缓存名，则生成更多缓存实例。当方法执行前，只要有一个缓存命中，关联值被返回。
注意：其他所有没有此缓存值的缓存实例中也会更新这次缓存，即使此方法实际没有被调用。

每个被缓存方法需要被转化成合适的缓存访问键key，默认键生成，缓存键的默认生成有三种方式;

如果方法没有参数，则返回SimpleKey.EMPTY.

如果方法仅给定一个参数，则返回参数实例.

如果有给定多个参数，返回一个包含所有参数的SimpleKey.

只要这些参数有自然键(natural keys)并且实现了合法的hashCode()和equals()方法，如果不是这种情况，需要
实现org.springframework.cache.interceptor.KeyGenerator接口来提供不同的默认键生成器。
对于一些情况，只有部分参数与缓存键相关;
@Cacheable("books")
public Book findBook(ISBN isbn, boolean checkWarehouse, boolean includeUsed)
第一眼看去，这两个boolean值参数只影响发现书的方式，对缓存没有用，更进一步，
这两个中只有一个重要，另一个不重要，该怎么办？
@Cacheable注解通过其key属性来让你指定缓存键如何生成。你可以使用SpEL去挑选感兴趣的参数(或者参数的内嵌属性)，
执行运算，或者甚至调用随意的方法而不用写任何代码或实现任何接口。这是在默认键生成器之上被推荐的方法，因为随着代码
基础增长，方法在签名上趋向于相当不同。默认策略也许对一些方法工作很好，但很少对所有方法都这样。
@Cacheable(cacheNames="books", key="#isbn")
public Book findBook(ISBN isbn, boolean checkWarehouse, boolean includeUsed)

@Cacheable(cacheNames="books", key="#isbn.rawNumber")
public Book findBook(ISBN isbn, boolean checkWarehouse, boolean includeUsed)

@Cacheable(cacheNames="books", key="T(someType).hash(#isbn)")
public Book findBook(ISBN isbn, boolean checkWarehouse, boolean includeUsed)

上述片段展示了他是多容易去选择某一个参数，参数属性之一，甚至随意的静态方法。
指定KeyGenerator的bean实现的名字来共享生成算法
@Cacheable(cacheNames="books", keyGenerator="myKeyGenerator")
public Book findBook(ISBN isbn, boolean checkWarehouse, boolean includeUsed)
注意：key与keyGenerator是相互独占的，指定两个会导致异常。

实现org.springframework.cache.interceptor.CacheResolver借口提供不用的默认缓存解析器。

存在多个cacheManager时，设置cacheManager;

@Cacheable(cacheNames="books", cacheManager="anotherCacheManager") 
public Book findBook(ISBN isbn) {...}

指定一个CacheResolver，基于运行时参数来解析要使用的缓存实例;

@Cacheable(cacheResolver="runtimeCacheResolver") 
public Book findBook(ISBN isbn) {...}

注意：自spring4.1以来，cache注解的value属性不再是强制了，因为特殊信息可以被CacheResolver提供
而不论注解的内容。
类似于key and keyGenerator，cacheManager and cacheResolver参数也是相互独占的，指定两个的操作导致异常，
自定义CacheManager被CacheResolver实现忽略，这可能不是你所期待的。(CacheManager的默认CacheResolver被忽略)

多线程情况下，会产生对于相同参数的并发调用操作。缓存抽象不锁任何东西，相同的值也许被计算好几次，击败了缓存的目标。
当值被计算时，sync属性来指导底层缓存提供者锁住缓存条目。只有一个线程忙于计算值，其他线程阻塞直到条目被更新在缓存中。

@Cacheable(cacheNames="foos", sync=true) 
public Foo executeExpensiveOperation(String id) {...}

注意：这是可选特性，你最喜欢的缓存库也许不一定支持它。所有被核心框架提供的CacheManager实现都支持它。

condition属性指定缓存条件，通过根据SpEL表达式计算结果决定是否缓存

@Cacheable(cacheNames="book", condition="#name.length() < 32") 
public Book findBook(String name)

unless属性指定条件来否定缓存，它在方法调用后执行

@Cacheable(cacheNames="book", condition="#name.length() < 32", unless="#result.hardback") 
public Book findBook(String name)

@CacheEvict: Triggers cache eviction.

spring缓存抽象不仅允许缓存填充，也允许缓存清出。这种处理对于移除来自缓存中旧的或未使用的数据非常有用。
与@Cacheable相反, @CacheEvict界定处理缓存清出的方法（这样的方法，行为类似从缓存中移除数据的触发器）。
类似于它的兄弟，@CacheEvict需要指定一个或更多被这个方法动作影响的缓存（cacheNames），允许自定义缓存和key解析，
或要被指定的condition，一个额外参数（allEntries）表明是否需要执行缓存范围清出而不仅仅是一个条目清出（基于key的缓存条目）。

@CacheEvict(cacheNames="books", allEntries=true) 
public void loadBooks(InputStream batch)

这个选项是随手而来的当一整个缓存区域需要被清空，而不是清空每一个条目（这样花费长时间，因为低效），
所有的在一个操作中都被移除，如上例子所述。注意框架会忽略任何在这个脚本中指定的key因为它不会应用(整个缓存被清出，不仅仅是一个条目）。
你可以表明清出应该在方法执行后或执行前发生，通过beforeInvocation属性。beforeInvocation=true总是造成缓存清出
在方法被调用前发生，这是有用的，在缓存不需要绑定到方法执行结果时。beforeInvocation=false，方法抛出异常或者调用缓存
，清空不会被发生。
注意返回值为void的方法也可以使用@CacheEvict，这是和@Cacheable不用的。

@CachePut: Updates the cache without interfering with the method execution.

当缓存需要更新而不干扰方法执行时，可以使用这个注解。那就是，方法总是执行，然后结果被放到缓存中。
它与@Cacheable有相同的参数，并且应该被用来缓存填充，而不是方法流优化。

@CachePut(cacheNames="book", key="#isbn")
public Book updateBook(ISBN isbn, BookDescriptor descriptor)

注意：@CachePut and @Cacheable不鼓励在同一方法使用，他们有不同的行为。
后一个通过使用缓存造成方法执行应该跳过，前一个为了执行缓存更新而强制方法执行。这会导致不期待的行为以及特定的
角落情况异常（例如注解条件互相排除）。这样的声明应该避免。
注意这样的conditions不应该依赖于结果对象( the #result variable)，因为这些被提前校验来确认排除规则。

@Caching: Regroups multiple cache operations to be applied on a method.

有时，相同类型的多个注解需要被指定，因为condition和key expression在不同缓存间是不同的。
@Caching让多个内嵌@Cacheable, @CachePut, and @CacheEvict被使用在相同方法上。

@Caching(evict = { @CacheEvict("primary"), @CacheEvict(cacheNames="secondary", key="#p0") })
public Book importBooks(String deposit, Date date)

@CacheConfig Shares some common cache-related settings at class-level. 

有些自定义选项配置起来很乏味如果它们被应用到这个类的所有操作上。指定缓存名为每个缓存操作使用，这样的类可以用
单个类级定义来替换。这就是@CacheConfig发威的地方。

@CacheConfig("books") 
public class BookRepositoryImpl implements BookRepository {

    @Cacheable
    public Book findBook(ISBN isbn) {...}
}

@CacheConfig是一个允许共享缓存名，自定义KeyGenerator，自定义CacheManager，和自定义CacheResolver的类级注解。
将这个注解放在类上不会开启任何缓存操作。
operation-level 定制覆盖@CacheConfig定制，以下是覆盖顺序;

Globally configured, available for CacheManager, KeyGenerator.

At the class level, using @CacheConfig.

At the operation level.

在配置类上添加@EnableCaching或者xml文件配置<cache:annotation-driven/>开启缓存抽象。

<!-- the service we want to make cacheable -->
<bean id="bookService" class="x.y.service.DefaultBookService"/>

<!-- cache definitions -->
<cache:advice id="cacheAdvice" cache-manager="cacheManager">
    <cache:caching cache="books">
        <cache:cacheable method="findBook" key="#isbn"/>
        <cache:cache-evict method="loadBooks" all-entries="true"/>
    </cache:caching>
</cache:advice>

<!-- apply the cacheable behavior to all BookService interfaces -->
<aop:config>
    <aop:advisor advice-ref="cacheAdvice" pointcut="execution(* x.y.BookService.*(..))"/>
</aop:config>

